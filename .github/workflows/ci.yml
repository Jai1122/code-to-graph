name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      neo4j:
        image: neo4j:5.12
        env:
          NEO4J_AUTH: neo4j/password123
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -e .
        
    - name: Install additional test dependencies
      run: |
        pip install dash plotly networkx pandas
        pip install httpx pydantic loguru rich click
    
    - name: Wait for Neo4j
      run: |
        timeout 60 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' localhost 7687
    
    - name: Run configuration tests
      run: |
        python -c "from src.code_to_graph.core.config import settings; print('Config loaded successfully')"
        python -c "from src.code_to_graph.llm.llm_factory import LLMFactory; print('Factory loaded successfully')"
      env:
        NEO4J_PASSWORD: password123
        LLM_PROVIDER: ollama
        LLM_OLLAMA_BASE_URL: http://localhost:11434
        LLM_OLLAMA_MODEL: test-model
    
    - name: Test CLI commands (dry run)
      run: |
        # Test CLI imports and help
        PYTHONPATH=src python -m code_to_graph.cli.main --help
        PYTHONPATH=src python -m code_to_graph.cli.main status --help
      env:
        NEO4J_PASSWORD: password123
        LLM_PROVIDER: ollama
    
    - name: Run basic functionality tests
      run: |
        # Test Neo4j connection
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from code_to_graph.storage.neo4j_client import Neo4jClient
        try:
            with Neo4jClient() as client:
                stats = client.get_database_stats()
                print(f'✅ Neo4j connected: {stats[\"total_nodes\"]} nodes')
        except Exception as e:
            print(f'❌ Neo4j connection failed: {e}')
            sys.exit(1)
        "
      env:
        NEO4J_PASSWORD: password123
        NEO4J_URI: bolt://localhost:7687
    
    - name: Test VLLM client creation
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from code_to_graph.llm.vllm_client import VLLMClient
        client = VLLMClient(base_url='https://test.com', model='test-model', api_key='test-key')
        print('✅ VLLM client created successfully')
        client.close()
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black formatter check
      run: black --check --diff src/
      continue-on-error: true
    
    - name: Run isort import check
      run: isort --check-only --diff src/
      continue-on-error: true
    
    - name: Run flake8 linter
      run: flake8 src/
      continue-on-error: true
    
    - name: Run mypy type checker
      run: mypy src/
      continue-on-error: true

  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation files exist
      run: |
        test -f README.md || (echo "README.md missing" && exit 1)
        test -f GETTING_STARTED.md || (echo "GETTING_STARTED.md missing" && exit 1)
        test -f SECURITY.md || (echo "SECURITY.md missing" && exit 1)
        test -f .env.example || test -f .env.template || (echo "Environment template missing" && exit 1)
        echo "✅ All required documentation files present"
    
    - name: Check for secrets in code
      run: |
        # Check for common secret patterns
        if grep -r -i "password.*=" src/ --exclude-dir=__pycache__ | grep -v "password.*Field\|password.*input\|password.*prompt"; then
          echo "❌ Potential hardcoded passwords found"
          exit 1
        fi
        
        if grep -r "api[_-]key.*=" src/ --exclude-dir=__pycache__ | grep -v "api_key.*Field\|api_key.*input"; then
          echo "❌ Potential hardcoded API keys found"
          exit 1
        fi
        
        echo "✅ No hardcoded secrets detected"